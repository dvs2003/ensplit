from cryptography.fernet import Fernet
import os

#This function has been AI generated by Google Gemini Advanced on 15th May 2024
def split_file(input_file, max_bytes=1024 * 1024 * 100):  # 100 MB default
    """Splits a large input file into smaller chunks."""

    chunk_number = 1
    output_file = None
    current_size = 0

    with open(input_file, 'rb') as f_in:  # Open in binary mode (optional)
        for line in f_in:
            if output_file is None or current_size >= max_bytes:
                if output_file:
                    output_file.close()
                output_file = open(f'part{chunk_number}.part', 'wb')
                chunk_number += 1
                current_size = 0

            output_file.write(line)
            current_size += len(line)

    if output_file:
        output_file.close()

def stitching(output_file):
    all_files = os.listdir()
    to_stitch = []
    for each_file in all_files:
        if each_file[:4] == 'part':
            to_stitch.append(each_file)
    #Create Output File
    with open(f'{output_file}', 'wb'):
        print(f'{output_file} Created.')
    #Append each part to it
    for __file in to_stitch:
        with open(output_file, 'ab') as output_to:
            with open(__file, 'rb') as current_chunk:
                output_to.write(current_chunk.read())
            

def generate_key(name_of_key):
    # Name the encrypted files in accordance with keys
    
    key = Fernet.generate_key()
    
    print('Key will be generated in ->')
    print(f'{print(os.getcwd())} -> {name_of_key}.key')
    
    with open(f'{name_of_key}.key', 'wb') as filekey:
        filekey.write(key)

       
#generate_key('my_key')
#input_file_path = 'oof.mkv' 
#split_file(input_file_path, max_bytes=50 * 1024 * 1024)
#stitching('oof2.mkv')